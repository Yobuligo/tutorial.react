Next to centralize environment variables it is also possible to have separate environment variables for e.g. development and production.
Therefore create to separate files which contain the variables for the corresponding system type.

    .env.development
    .env.production

But it seems you have to install a separate package to use it and to adjust the script for "build" or "test" by providing the files which should be used.

Keep in mind, these files shouldn't contain any keys. So better exclude the files from git by adding it to .gitignore.

have a look at: https://www.youtube.com/watch?v=Hfs8ZEMySXU&ab_channel=WittCode

you can use dotEnv that can handle the environment variables. 
1. install it by "npm install dotenv"
2. create .env file
3. call dotenv.config() to load the parameters (at the very beginning of your application)
4. access the variables by process.env.<name>

Using environment variables depending on the environment type on base of dotenv
1. create a .env.<environment-type> file for each environment type e.g. .env.development or .env.production
2. adjust dotenv.config by getting the environment type from another node environment variable by calling dotenv.config({ path: ".env.${process.env.NODE_ENV}"})
3. Run the app with another parameter by calling e.g. (here the app runs on a production system)
    "NODE_ENV=production node index.js"

Also consider the order of used environment variables. Here you can see, that e.g. the command npm run build uses .env.production as default, while npm start prefers .env.development:
Dev.: (npm start): .env.development.local, .env.local, .env.development, .env
Prod.: (npm run build): .env.production.local, .env.local, .env.production, .env

Using environment variables in scripts. It is possible to use an environment variable in the script definition within the package.json. Whenever npm start is called it will call the application with HOSTNAME as localhost and PORT as 1234
"start":"HOSTNAME=localhost PORT=1234 node app.js"

Using .env.local
In .env.local you can set up environment variables that are specific to your local machine and it doesn't have to be on development mode to work. 
So variables there will work for both development and production

Variables NODE_ENV (process.env.NODE_ENV)
It is used to define if we are in development or production.
Is set by the hosting provider.

Simulate production system
If environment types should be tested, this can be achieved by setting NODE_ENV in the start script. The following example would simulate an execution on a production system:
  "scripts": {
    "start": "SET NODE_ENV=production&& nodemon ./dist/app.js"
  },
This example is for using dotenv. Therefor dotenv has to be configured by setting the .env path to .env.development by using 
configDotenv({ path: `.env.${process.env.NODE_ENV}` });
